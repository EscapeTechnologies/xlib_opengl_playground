// Created By: Vineeth Yeevani
// Date: July, 30, 2018
// Description: Drawing a triangle using X-window full screen

#include <X11/X.h>
#include <X11/Xlib.h>
#include <iostream>
#include <GL/gl.h>
#include <GL/glx.h>
#include <GL/glu.h>
#include <thread>
#include <chrono>

using namespace std;

// Function Prototype
void drawTriangleGL();
void drawTriangleGLAD();

int main(int argc, char** argv)
{
  /* XLIB INIT */
  Display* dsp = XOpenDisplay(NULL);

  /* OPENGL INIT */
  GLint att[] = {GLX_RGBA, GLX_DEPTH_SIZE, 24, GLX_DOUBLEBUFFER, None};
  XVisualInfo* vi = glXChooseVisual(dsp, 0, att);

  if (vi == NULL) {
    cout << "No appropriate Visual was found" << endl;
    return -1;
  }
  
  Colormap cmap = XCreateColormap(dsp, DefaultRootWindow(dsp), vi->visual, AllocNone);
  XSetWindowAttributes swa;
  swa.colormap = cmap;
  swa.event_mask = ExposureMask|KeyPressMask;
  
  Window win = XCreateWindow(dsp, DefaultRootWindow(dsp), 0, 0, 1000, 1000, 0, vi->depth, InputOutput, vi->visual, CWColormap|CWEventMask, &swa);

  Atom wm_state = XInternAtom(dsp, "_NET_WM_STATE", False);
  Atom fullscreen = XInternAtom(dsp, "_NET_WM_STATE_FULLSCREEN", False);

  /* SET XLIB SCREEN INFORMATION */
  XEvent xev;
  xev.type = ClientMessage;
  xev.xclient.window = win;
  xev.xclient.message_type = wm_state;
  xev.xclient.format = 32;
  xev.xclient.data.l[0] = 1;
  xev.xclient.data.l[1] = fullscreen;
  xev.xclient.data.l[2] = 0;

  XMapWindow(dsp, win);
  XSendEvent(dsp, DefaultRootWindow(dsp), False, SubstructureRedirectMask|SubstructureNotifyMask, &xev);
  GLXContext glc = glXCreateContext(dsp, vi, NULL, GL_TRUE);
  glXMakeCurrent(dsp, win, glc);

  glEnable(GL_DEPTH_TEST);

  while(1) {
    XNextEvent(dsp, &xev);

    if (xev.type == Expose) {
      // Draw Triangle
      drawTriangleGL();
      glXSwapBuffers(dsp, win);
    }

    else if (xev.type == KeyPress) {
      // TODO: Input handling
    }
  }
    
  // Sleep for 5 seconds
  this_thread::sleep_for(chrono::seconds(5));

  // Destroy All Assets
  glXMakeCurrent(dsp, None, NULL);
  glXDestroyContext(dsp, glc);
  XDestroyWindow(dsp, win);
  XCloseDisplay(dsp);
  return 0;
}

void drawTriangleGL()
{
  cout << "Draw Triangle" << endl;
  glClearColor(0., 0., 0., 0.);
  glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

  /*glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glOrtho(-1., 1., -1., 1., 1., 20.);

  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  gluLookAt(0., 0., 10., 0., 0., 0., 0., 1., 0.);*/

  glBegin(GL_QUADS);
  glColor3f(1., 0., 0.); glVertex3f(-.75, -.75, 0.);
  glColor3f(0., 1., 0.); glVertex3f( .75, -.75, 0.);
  glColor3f(0., 0., 1.); glVertex3f( .75,  .75, 0.);
  glColor3f(1., 1., 0.); glVertex3f(-.75,  .75, 0.);
  glEnd();
}

void drawTriangleGLAD()
{
  /*glClearColor(1.0, 1.0, 1.0, 1.0);
  glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
  float vertices[] = {
    -0.5f, -0.5f, 0.0f,
    0.5f, -0.5f, 0.0f,
    0.0f, 0.5f, 0.0f
  };

  const char* vertexShaderSource = "#version 330 core\n"
    "layout (location = 0) in vec3 aPos;\n"
    "void main()\n"
    "{\n"
    "  gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
    "}\0";

  const char* fragmentShaderSource = "#version 330 core\n"
    "out vec4 FragColor;\n"
    "void main()\n"
    "{\n"
    "  gl_Position = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
    "}\n\0";

  unsigned int VAO;
  glGenVertexArray(1, &VAO);
  glBindVertexArray(VAO);

  unsigned int VBO;
  glGenBuffers(1, &VBO);
  glBindBuffer(GL_ARRAY_BUFFER, VBO);
  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

  unsigned int vertexShader;
  vertexShader = glCreateShader(GL_VERTEX_SHADER);
  glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
  glCompileShader(vertexShader);

  unsigned int fragmentShader;
  fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
  glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
  glCompileShader(fragmentShader);

  unsigned int shaderProgram;
  shaderProgram = glCreateProgram();
  glAttachShader(shaderProgram, vertexShader);
  glAttachShader(shaderProgram, fragmentShader);
  glLinkProgram(shaderProgram);
  glDeleteShader(vertexShader);
  glDeleteShader(fragmentShader);

  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3*sizeof(float), (void*)0);
  glEnableVertexAttribArray(0);

  glUseProgram(shaderProgram);
  glBindVertexArray(VAO);
  glDrawArrays(GL_TRIANGLES, 0, 3);*/
}
